{"version":3,"sources":["Components/SearchBox.js","Components/Card.js","Components/CardList.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","Card","props","id","name","email","alt","src","CardList","robots","map","user","i","key","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oSAYeA,G,MATG,SAAC,GAClB,IADmBC,EACpB,EADoBA,aAEjB,OACE,yBAAKC,UAAU,SACd,2BAAOC,KAAK,OAAOD,UAAU,wBAAwBE,YAAY,gBAAgBC,SAAUJ,OCSlFK,G,MAbF,SAACC,GACb,IACOC,EAAmBD,EAAnBC,GAAIC,EAAeF,EAAfE,KAAMC,EAASH,EAATG,MAChB,OACC,yBAAKR,UAAU,QACP,yBAAKA,UAAU,cACf,yBAAKS,IAAI,OAAOC,IAAG,+BAA0BJ,KAC7C,wBAAIN,UAAU,eAAeO,GAC7B,uBAAGP,UAAU,eAAeQ,OCOxBG,EAdE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACC,6BAEQA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACC,kBAAC,EAAD,CAAMC,IAAKJ,EAAOG,GAAGT,GAAIA,GAAIM,EAAOG,GAAGT,GAAIC,KAAMK,EAAOG,GAAGR,KAAMC,MAAOI,EAAOG,GAAGP,aCC/ES,EATA,SAACZ,GACf,OACG,yBAAKa,MAAO,CAAEC,UAAY,SAAUC,OAAQ,kBAAmBC,OAAO,UAChEhB,EAAMiB,WC4CDC,G,wDAxCf,aACC,IAAD,8BACC,gBAgBDC,eAAiB,SAACC,GAEf,EAAKC,SAAS,CAAEC,YAAcF,EAAMG,OAAOC,SAjB7C,EAAKC,MACL,CACClB,OAAO,GACPe,YAAY,IALd,E,gEAUC,IAAD,OACII,MAAM,8CACLC,MAAK,SAAAC,GAAc,OAAOA,EAASC,UACnCF,MAAK,SAAAG,GAAW,EAAKT,SAAS,CAACd,OAASuB,S,+BAS3C,IAAD,OACOC,EAAiBC,KAAKP,MAAMlB,OAAO0B,QAAO,SAAAC,GAC7C,OAAOA,EAAMhC,KAAKiC,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAGpE,OACC,yBAAKxC,UAAU,eACX,2CACA,kBAAC,EAAD,CAAWD,aAAgBsC,KAAKb,iBAChC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUZ,OAAQwB,U,GAnCPM,IAAMC,Y,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b4c7d786.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../Components/SearchBox.css';\r\n\r\nconst SearchBox = ({searchChange}) => \r\n{\r\n   return(\r\n     <div className='p0 m0'>\r\n     \t<input type='text' className='btn btn-primary p0 m0' placeholder='Search Robots' onChange={searchChange}/>   \r\n     </div>\r\n   \t);\r\n}\r\n\r\nexport default SearchBox;\r\n\r\n//onchange is the event listener which is called in the input","import React from 'react';\r\nimport '../Components/Card.css';\r\n\r\nconst Card = (props) => \r\n{\r\n\tconst {id, name, email} = props;\r\n\t\treturn(\r\n\t\t\t<div className='card'>\r\n          \t<div className='inner-card'>\r\n\t          <img alt='John' src={`https://robohash.org/${id}`}/>\r\n\t          <h4 className='text-center'>{name}</h4>\r\n\t          <p className='text-center'>{email}</p>\r\n\t        </div>\r\n          </div>\r\n          );\r\n\t}\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Components/Card';                            \r\n\r\n\r\nconst CardList = ({robots}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t{\r\n          robots.map((user,i)=>{\r\n          \treturn(\r\n            <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n          \t);\r\n          })\r\n\t\t}\r\n\t\t</div>\r\n\r\n    );\r\n}\r\nexport default CardList;\r\n\r\n\r\n//cardList is a pure function which means its deterministic - We know that data flows from robots and it will\r\n//dispaly those data only. No other data will be flowing. We know what it will look like  (PURE COMPONENT)","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n    <div style={{ overflowY : 'scroll', border: '2px solid black', height:'800px'}}>\r\n         {props.children}\r\n    </div> \r\n\r\n   );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport CardList from '../Components/CardList';\r\nimport Scroll from '../Components/Scroll';\r\nimport './App.css'\r\n\r\n\r\nclass App extends React.Component {\r\n\r\nconstructor()\r\n{\r\n\tsuper();\r\n\tthis.state =\r\n\t{\r\n\t\trobots:[],\r\n\t\tsearchfield:''\r\n\t}\r\n}\r\n\r\ncomponentDidMount()\r\n{\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => { return response.json()})\r\n    .then(users => { this.setState({robots : users})});\r\n}\r\n\r\n\r\nonSearchChange = (event) =>\r\n{\r\n   this.setState({ searchfield : event.target.value })\r\n}\r\n render() \r\n {\r\n \tconst filteredRobots = this.state.robots.filter(robot => {\r\n\t   \treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t   })\r\n\r\n\treturn (\r\n\t\t<div className=\"text-center\">\r\n\t\t    <h1>ROBOFRIENDS</h1>\r\n\t\t    <SearchBox searchChange = {this.onSearchChange} />\r\n\t\t    <Scroll>\r\n\t\t    \t<CardList robots={filteredRobots} /> \r\n\t\t    </Scroll>\r\n\t\t</div>\r\n\t);\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Containers/App';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import $ from 'jquery';\n// import Popper from 'popper.js';\n// import {robots} from './robots.js';          //json file of list of robots and there email and user-id.\n// import CardList from './CardList';           //parent of CardComponent\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n   <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}